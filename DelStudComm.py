import requests
import re
import html
def gettoken(username, password):
    session = requests.Session()
    resp = session.get("https://scratch.mit.edu/csrf_token/")
    csrf_token = session.cookies.get('scratchcsrftoken')
    headers = {
        "referer": "https://scratch.mit.edu",
        "X-Requested-With": "XMLHttpRequest",
        "X-CSRFToken": csrf_token,
        "Content-Type": "application/json",
        "Accept-Language": "ru-RU,ru;q=0.9"
    }
    body = {
        "username": username,
        "password": password,
        "useMessages": "true"
    }
    respo = session.post(
        "https://scratch.mit.edu/accounts/login/",
        headers=headers,
        json=body
    )
    if respo.status_code == 200:
        data = respo.json()
        token = data[0].get("token")
        return {"success": True, "data": token}
    elif respo.status_code == 403:
        return {"success": False, "data": data[0].get("msg")}
def decode(text):
    text = html.unescape(text) #–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —á–µ–ø—É—Ö—É —Å —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥
    text = text.replace('<img src="/images/emoji/lol-cat.png" class="emoji" alt="lol-cat emoji">', 'üòπ')#                  –≠
    text = text.replace('<img src="/images/emoji/upside-down-cat.png" class="emoji" alt="upside-down-cat emoji">', 'üôÉ')#  –ú
    text = text.replace('<img src="/images/emoji/cat.png" class="emoji" alt="cat emoji">', 'üò∫')#                          –û
    text = text.replace('<img src="/images/emoji/meow.png" class="emoji" alt="meow emoji">', '_meow_')#                    –î
    text = text.replace('<img src="/images/emoji/gobo.png" class="emoji" alt="gobo emoji">', '_gobo_')#                    –ó
    text = text.replace('<img src="/images/emoji/taco.png" class="emoji" alt="taco emoji">', 'üåÆ')#                       –ò
    text = text.replace('<img src="/images/emoji/huh-cat.png" class="emoji" alt="huh-cat emoji">', 'üòº')
    text = text.replace('<img src="/images/emoji/aww-cat.png" class="emoji" alt="aww-cat emoji">', 'üò∏')
    text = text.replace('<img src="/images/emoji/10mil.png" class="emoji" alt="10mil emoji">', 'üéâ')
    text = text.replace('<img src="/images/emoji/camera.png" class="emoji" alt="camera emoji">', 'üì∑')
    text = text.replace('<img src="/images/emoji/blm.png" class="emoji" alt="blm emoji">', '‚úä')#       –û–°–£–ñ
    text = text.replace('<img src="/images/emoji/pride.png" class="emoji" alt="pride emoji">', 'üè≥Ô∏è‚Äçüåà')#   –î–ê–Æ
    text = text.replace('<img src="/images/emoji/pizza-cat.png" class="emoji" alt="pizza-cat emoji">', '_:D<_')
    text = text.replace('<img src="/images/emoji/rainbow-cat.png" class="emoji" alt="rainbow-cat emoji">', '[Rainbow cat]')
    text = text.replace('<img src="/images/emoji/pizza.png" class="emoji" alt="pizza emoji">', 'üçï')
    text = text.replace('<img src="/images/emoji/sushi.png" class="emoji" alt="sushi emoji">', 'üç£')
    text = text.replace('<img src="/images/emoji/fav-it-cat.png" class="emoji" alt="fav-it-cat emoji">', 'ü§©')
    text = text.replace('<img src="/images/emoji/waffle.png" class="emoji" alt="waffle emoji">', 'üßá')
    text = text.replace('<img src="/images/emoji/tongue-out-cat.png" class="emoji" alt="tongue-out-cat emoji">', 'üòõ')
    text = text.replace('<img src="/images/emoji/love-it-cat.png" class="emoji" alt="love-it-cat emoji">', 'üòç')
    text = text.replace('<img src="/images/emoji/compass.png" class="emoji" alt="compass emoji">', 'üß≠')
    text = text.replace('<img src="/images/emoji/candycorn.png" class="emoji" alt="candycorn emoji">', 'üç¨')
    text = text.replace('<img src="/images/emoji/map.png" class="emoji" alt="map emoji">', 'üó∫Ô∏è')
    text = text.replace('<img src="/images/emoji/apple.png" class="emoji" alt="apple emoji">', 'üçé')
    text = text.replace('<img src="/images/emoji/binoculars.png" class="emoji" alt="binoculars emoji">', 'üî≠')
    text = text.replace('<img src="/images/emoji/broccoli.png" class="emoji" alt="broccoli emoji">', 'ü•¶')
    text = text.replace('<img src="/images/emoji/suitcase.png" class="emoji" alt="suitcase emoji">', 'üíº')
    text = text.replace('<img src="/images/emoji/cupcake.png" class="emoji" alt="cupcake emoji">', 'üßÅ')
    text = text.replace('<img src="/images/emoji/cupcool-catcake.png" class="emoji" alt="cool-cat emoji">', 'üòé')
    text = text.replace('<img src="/images/emoji/wink-cat.png" class="emoji" alt="wink-cat emoji">', 'üòú')
    return text
headers = { #–ó–∞–≥–æ–ª–æ–≤–∫–∏. –ë–µ–∑ –Ω–∏—Ö –∑–∞–ø—Ä–æ—Å –±—ã –¥–∞–≤–∞–ª 403
    "accept-encoding": "gzip, deflate, br, zstd",
    "accept-language": "ru-RU,ru;q=0.8",
    "origin": "https://scratch.mit.edu",
    "priority": "u=1, i",
    "referer": "https://scratch.mit.edu/",
    "sec-ch-ua": '"Not;A=Brand";v="99", "Brave";v="139", "Chromium";v="139"',
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": '"Windows"',
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-site",
    "sec-gpc": "1",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
    "X-Token": "X-Token" #–ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ X-Token, —Ç–æ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –≥—Ä—É–∑–∏—Ç—å—Å—è –¥–∞–∂–µ –±–µ–∑ X-Token-–∞!
}
print("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —è —Ç–µ–±–µ –ø–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—É–¥–∏—è—Ö!")
isempty = False
while True:
    print("–í–æ–π–¥–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –í–õ–ê–î–ï–õ–¨–¶–ï–ú —Å—Ç—É–¥–∏–∏!")
    lop = True
    while lop:
        username = input("–í–≤–µ–¥–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
        password = input("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å: ")
        print("–í—Ö–æ–¥–∏–º...")
        a = gettoken(username, password)
        if a["success"]:
            lop = False
            loltoken = a["data"]
        else:
            print(a["data"])
    print("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID —Å—Ç—É–¥–∏–∏!")
    studio = int(re.findall(r'\d+', input(">> "))[0]) #–°—Ä–∞–∑—É –∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–π–¥–∏ —Å—Ç—É–¥–∏–∏
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    off = 0
    loop = True
    headers["X-Token"] = loltoken
    while loop:
        rcomments = requests.get(f"https://api.scratch.mit.edu/studios/{studio}/comments?offset={off}&limit=20", headers=headers) #–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–æ –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤
        if rcomments.status_code == 200:
            comments = rcomments.json() #–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å Python
            if len(comments) < 20:
                loop = False
            if len(comments) != 0:
                for comment in comments:
                    print()
                    print(comment["author"]["username"])
                    print(decode(comment["content"]))
                    if comment["reply_count"] > 0:
                        rreplies = requests.get(f'https://api.scratch.mit.edu/studios/{studio}/comments/{comment["id"]}/replies?offset=0&limit=25', headers=headers) #–û—Ç–≤–µ—Ç—ã
                        if rreplies.status_code == 200:
                            replies = rreplies.json()
                            for reply in replies:
                                print()
                                print(f'    {reply["author"]["username"]}')
                                print(f'    {decode(reply["content"])}')
                        else:
                            print(f"    --- –û—à–∏–±–∫–∞ {rreplies.status_code} ---")
            else:
                print("--- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Å—Ç—É–¥–∏–∏ –Ω–µ—Ç! ---")
                isempty = True
        else:
            print(f"--- –û—à–∏–±–∫–∞ {rcomments.status_code} ---")
            loop = False
        if loop:
            print()
            print("--- –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë  ---")
            ent = input("--- –ù–∞–∂–º–∏—Ç–µ 0 –∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é ---")
            if ent != "0":
                off += 20
            else:
                loop = False
        else:
            if isempty:
                isempty = False
            else:
                print("--- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ---")